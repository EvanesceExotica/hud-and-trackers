#custom_playerlist {
	width: max-content;
	height: max-content;
	background-color: transparent;
	top: unset !important;
	bottom: var(--playerlist-bottom) !important;
	transition: bottom 100ms ease-out;

	&.slide-up {
		bottom: calc(var(--playerlist-height) + var(--playerlist-bottom)) !important;
	}

	.window-header {
		display: none;
	}

	.window-content {
		min-height: 20vh;
		flex-direction: column;
		overflow: visible;
		background-color: transparent;
		// background-color: scale-color(var(--primary-darkest-color), $alpha: -50%);


		.content {
			display: flex;
			flex-direction: row;
			overflow: visible;
			background-color: transparent;

			.current-character {
				aspect-ratio: 1/1;
				width: 10rem;
				height: 10rem;
				position: relative;
				background-color: var(--black2);
				cursor: pointer;

				//for when the character is the current pc, but not selected
				&:not(.selected) {
					>img {
						filter: grayscale(90%);
					}
				}

				&:hover {
					@include ba(before, 100%, 100%, 0, 0, false) {
						box-shadow: inset 1px 1px 2px 3px rgba(0, 0, 0, 0.479),
							inset -1px -1px 2px 3px rgba(0, 0, 0, 0.548);
						z-index: 10;
						pointer-events: none;
					}
				}

				// if the character's token is selected
				&.selected {
					position: relative;
					width: 10rem;
					height: 10rem;

					&:after {
						content: '';
						position: absolute;
						width: 100%;
						height: 100%;
						left: 0;
						top: 0;
						box-shadow: inset 1px 1px 0 1px cyan, inset -1px -1px 0 1px cyan;
						z-index: 20;
					}
				}


				//characters this user controls, but not the "current" character
				.otherCharacters {
					.secondary-character {
						cursor: pointer;
						position: absolute;
						border-radius: 50%;
						right: 0;
						bottom: 0;
						width: 2rem;
						height: 2rem;
						background-color: var(--black4);
						border: 2px solid cornflowerblue;
						box-shadow: var(--shadow-lower);
						transform: scale(1);
						transition: transform 100ms ease-in;
						z-index: 20;

						&:hover {
							transform: scale(1.25);
						}

						&.selected {
							top: 0;
							bottom: 100%;
						}

						&:not(.selected) {
							filter: grayscale(90%);
						}
					}
				}
			}

			.other-users {
				display: flex;
				flex-direction: column;
				width: fit-content;
				height: 10rem;

				.active-user {
					border-radius: 50%;
					width: 2rem;
					height: 2rem;
					transform: scale(1);
					display: flex;
					align-items: center;
					justify-content: center;
					position: relative;

					.user-detail {
						position: absolute;
						top: 0;
						left: 0;
						width: 5rem;
						height: inherit;
						display: flex;
						align-items: center;
						justify-content: flex-end;
						border-top-left-radius: 25%;
						border-bottom-left-radius: 25%;
						border-top-right-radius: 5px;
						border-bottom-right-radius: 5px;
						background-color: $black2;
						transform: scaleX(0);
						transform-origin: left;
						transition: transform 100ms;
						padding: 0.25rem 2rem;

						// z-index: -1;
						.badge {
							width: 2rem;
							height: 2rem;
							align-self: flex-start;
						}
					}

					&:hover {
						cursor: pointer;

						.user-detail {
							transform: scaleX(1);
						}

						//maybe here display a larger version with name &
						//which character they currently have selected n' stuff
					}
				}
			}

		}

		.utility-buttons {
			padding: var(--space-unit-small) 0;
		}
	}
}